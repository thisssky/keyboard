#include "kb.h"

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

	KEYMAP(
		KC_ESC, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11, KC_F12, 
		KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_QUOT, KC_DEL, 
		KC_CAPS, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_ENT, KC_BSLS, 
		KC_LSFT, KC_Z, KC_X, KC_V, KC_C, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_RSFT, 
		KC_LCTL, KC_LGUI, KC_LALT, MO(2), KC_SPC, MO(1), KC_LEFT, KC_UP, KC_DOWN, KC_RGHT, KC_PGUP, KC_PGDN),

	KEYMAP(
		LCTL(LSFT(KC_ESC)), KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
		KC_TAB, LCTL(KC_Q), LCTL(KC_W), KC_TRNS, LCTL(KC_R), LCTL(KC_T), LCTL(KC_Y), KC_TRNS, KC_UP, KC_HOME, LCTL(KC_P), KC_TRNS, LCTL(LALT(KC_DEL)),
		KC_TRNS, LCTL(KC_A), LCTL(KC_S), LCTL(KC_D), LCTL(KC_F), KC_BSPC, KC_DEL, KC_LEFT, KC_DOWN, KC_RGHT, KC_END, LCTL(KC_ENT), KC_TRNS,
		KC_LSFT, LCTL(KC_Z), LCTL(KC_X), LCTL(KC_V), LCTL(KC_C), LCTL(KC_B), KC_PGUP, KC_PGDN, LSFT(KC_HOME), LSFT(KC_END), KC_RSFT,
		KC_LCTL, KC_LGUI, KC_LALT, KC_ENT, KC_SPC, KC_TRNS, KC_MUTE, KC_VOLU, KC_VOLD, KC_MSTP, KC_MPLY, KC_RCTL),

	KEYMAP(
		KC_GRV, KC_TILD, KC_LABK, KC_RABK, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_COMM, KC_DOT, KC_TRNS, KC_TRNS, 
		KC_LPRN, KC_QUES, KC_HASH, KC_AMPR, KC_DLR, KC_EXLM, KC_PERC, KC_7, KC_8, KC_9, KC_AT, KC_BSLS, KC_DEL,
		KC_LBRC, KC_SCLN, KC_DQUO, KC_PLUS, KC_MINS, KC_PIPE, KC_EQL, KC_4, KC_5, KC_6, KC_UNDS, KC_RBRC, KC_RPRN,
		KC_LCBR, KC_COLN, KC_QUOT, KC_ASTR, KC_SLSH, KC_CIRC, KC_0, KC_1, KC_2, KC_3, KC_RCBR, 
		KC_LCTL, KC_LSFT, KC_LALT, KC_TRNS, KC_SPC, LT(3, KC_ENT), KC_BSPC, KC_DEL, KC_RSFT, KC_RCTL, KC_PSCR, KC_INS),

	KEYMAP(
		KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, 
		KC_TAB, KC_MS_BTN3, KC_MS_BTN5, KC_MS_UP, LCTL(KC_R), LCTL(KC_T), LCTL(KC_Y), KC_MS_ACCEL0, KC_MS_WH_UP, KC_MS_ACCEL1, KC_TRNS, KC_TRNS, LCTL(LALT(KC_DEL)),
		KC_TRNS, KC_MS_BTN4, KC_MS_LEFT, KC_MS_DOWN, KC_MS_RIGHT, KC_BSPC, KC_DEL, KC_MS_BTN1, KC_MS_WH_DOWN, KC_MS_BTN2, KC_MS_ACCEL2, LCTL(KC_ENT), KC_TRNS,
		KC_LSFT, LCTL(KC_Z), LCTL(KC_X), LCTL(KC_V), LCTL(KC_C), LCTL(KC_B), KC_PGUP, KC_PGDN, LSFT(KC_HOME), LSFT(KC_END), KC_RSFT, 
		KC_LCTL, KC_LGUI, KC_LALT, KC_ENT, KC_SPC, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_RCTL)
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) {
	keyevent_t event = record->event;

	switch (id) {

	}
	return MACRO_NONE;
}

void matrix_init_user(void) {
}

void led_set_user(uint8_t usb_led) {

	if (usb_led & (1 << USB_LED_NUM_LOCK)) {
		
	} else {
		
	}

	if (usb_led & (1 << USB_LED_CAPS_LOCK)) {
		
	} else {
		
	}

	if (usb_led & (1 << USB_LED_SCROLL_LOCK)) {
		
	} else {
		
	}

	if (usb_led & (1 << USB_LED_COMPOSE)) {
		
	} else {
		
	}

	if (usb_led & (1 << USB_LED_KANA)) {
		
	} else {
		
	}

}
bool is_alt_tab_active = false; // ADD this near the begining of keymap.c
uint16_t alt_tab_timer = 0;     // we will be using them soon.

enum custom_keycodes {          // Make sure have the awesome keycode ready
  ALT_TAB = SAFE_RANGE,
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) { // This will do most of the grunt work with the keycodes.
    case ALT_TAB:
      if (record->event.pressed) {
        if (!is_alt_tab_active) {
          is_alt_tab_active = true;
          register_code(KC_LALT);
        }
        alt_tab_timer = timer_read();
        register_code(KC_TAB);
      } else {
        unregister_code(KC_TAB);
      }
      break;
  }
  return true;
}

void matrix_scan_user(void) { // The very important timer.
  if (is_alt_tab_active) {
    if (timer_elapsed(alt_tab_timer) > 1000) {
      unregister_code(KC_LALT);
      is_alt_tab_active = false;
    }
  }
}


